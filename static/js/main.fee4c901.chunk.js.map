{"version":3,"sources":["logo.svg","Visualizer/Visualizer.jsx","SortingAlgorithms/sortingAlgorithms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Visualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","sortedArray","mergeSort","length","mid","L","slice","R","j","sortingAlgorithms","console","log","className","map","value","idx","key","style","width","window","innerWidth","height","onClick","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,6JCMtBC,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,IAHI,E,iFAQfC,KAAKC,e,mCAKL,IADA,IAsCSC,EAAKC,EAtCRJ,EAAQ,GACLK,EAAI,EAAGA,EAhBN,GAgBqBA,IAC3BL,EAAMM,MAoCDH,EApCc,EAoCTC,EApCY,IAqCvBG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,KAlChDF,KAAKS,SAAS,CAAEV,Y,kCAIhB,IAAMW,EC5BW,SAAZC,EAAYZ,GACrB,GAAqB,IAAjBA,EAAMa,OACN,OAAOb,EAOX,IANA,IAAMc,EAAMP,KAAKC,MAAMR,EAAMa,OAAS,GAChCE,EAAIH,EAAUZ,EAAMgB,MAAM,EAAGF,IAC7BG,EAAIL,EAAUZ,EAAMgB,MAAMF,IAC1BH,EAAc,GAEhBN,EAAI,EAAGa,EAAI,EACRb,EAAIU,EAAEF,QAAUK,EAAID,EAAEJ,QACrBE,EAAEV,GAAKY,EAAEZ,GACTM,EAAYL,KAAKS,EAAEV,MAGnBM,EAAYL,KAAKW,EAAEC,MAI3B,KAAOb,EAAIU,EAAEF,QACTF,EAAYL,KAAKS,EAAEV,MAEvB,KAAOa,EAAID,EAAEJ,QACTF,EAAYL,KAAKW,EAAEC,MAEvB,OAAOP,EDIiBQ,CAA4BlB,KAAKF,MAAMC,OAC3DoB,QAAQC,IAAIV,K,8IAON,IAAD,OACGX,EAAUC,KAAKF,MAAfC,MAER,OACI,yBAAKsB,UAAU,mBACVtB,EAAMuB,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIH,UAAU,YACVI,IAAKD,EACLE,MAAO,CAAEC,OAAQC,OAAOC,WAAY,GAAa,KAzCvD,GAyCuEC,OAAO,GAAD,OAAKP,EAAL,YAE/E,4BAAQQ,QAAS,kBAAM,EAAK9B,eAA5B,sBACA,4BAAQ8B,QAAS,kBAAM,EAAKpB,cAA5B,cACA,4BAAQoB,QAAS,kBAAM,EAAKC,cAA5B,cACA,4BAAQD,QAAS,kBAAM,EAAKE,aAA5B,aACA,4BAAQF,QAAS,kBAAM,EAAKG,eAA5B,oB,GA7CwBC,IAAMC,Y,MES/BC,MARf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,QCEciB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fee4c901.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport * as sortingAlgorithms from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport './Visualizer.css';\r\n\r\nconst arraySize = 20;\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < arraySize; i++) {\r\n            array.push(randInt(5, 700));\r\n\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    mergeSort() {\r\n        const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\r\n        console.log(sortedArray);\r\n    }\r\n\r\n    quickSort() { }\r\n    heapSort() { }\r\n    bubbleSort() { }\r\n\r\n    render() {\r\n        const { array } = this.state;   \r\n        \r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{ width: (window.innerWidth-(2*arraySize)-100)/arraySize, height: `${value}px` }}></div>\r\n                ))}\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export const mergeSort = array => {\r\n    if (array.length === 1)\r\n        return array;\r\n    const mid = Math.floor(array.length / 2);\r\n    const L = mergeSort(array.slice(0, mid));\r\n    const R = mergeSort(array.slice(mid));\r\n    const sortedArray = [];\r\n\r\n    let i = 0, j = 0;\r\n    while (i < L.length && j < R.length) {\r\n        if (L[i] < R[i]) {\r\n            sortedArray.push(L[i++]);\r\n        }\r\n        else {\r\n            sortedArray.push(R[j++]);\r\n        }\r\n    }\r\n\r\n    while (i < L.length) {\r\n        sortedArray.push(L[i++]);\r\n    }\r\n    while (j < R.length) {\r\n        sortedArray.push(R[j++]);\r\n    }\r\n    return sortedArray;\r\n};","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Visualizer from './Visualizer/Visualizer';\r\nimport './App.css';\r\n//import React, { Component } from 'react';\r\nimport { HashRouter, Route, Link } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Visualizer></Visualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}